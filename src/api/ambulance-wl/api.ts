/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: test@test.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Ambulance
 */
export interface Ambulance {
    /**
     * Unique identifier of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'id': string;
    /**
     * Human readable display name of the ambulance
     * @type {string}
     * @memberof Ambulance
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Ambulance
     */
    'roomNumber': string;
    /**
     * 
     * @type {Array<WaitingListEntry>}
     * @memberof Ambulance
     */
    'waitingList'?: Array<WaitingListEntry>;
    /**
     * 
     * @type {Array<Room>}
     * @memberof Ambulance
     */
    'rooms'?: Array<Room>;
    /**
     * 
     * @type {Array<Condition>}
     * @memberof Ambulance
     */
    'predefinedConditions'?: Array<Condition>;
}
/**
 * Describes disease, symptoms, or other reasons of patient   visit
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'code'?: string;
    /**
     * Link to encyclopedical explanation of the patient\'s condition
     * @type {string}
     * @memberof Condition
     */
    'reference'?: string;
    /**
     * 
     * @type {number}
     * @memberof Condition
     */
    'typicalDurationMinutes'?: number;
}
/**
 * Describes dimensions and equipment of ambulance rooms
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'width'?: string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'height'?: string;
    /**
     * Link to something
     * @type {string}
     * @memberof Room
     */
    'reference'?: string;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    'tipicalCostToOperate'?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'equipment'?: string;
}
/**
 * 
 * @export
 * @interface RoomsListEntry
 */
export interface RoomsListEntry {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof RoomsListEntry
     */
    'id': string;
    /**
     * Width of room in waiting list
     * @type {string}
     * @memberof RoomsListEntry
     */
    'width': string;
    /**
     * Height of the room known to Web-In-Cloud system
     * @type {string}
     * @memberof RoomsListEntry
     */
    'height': string;
    /**
     * Timestamp since when the room entered the rooms list
     * @type {number}
     * @memberof RoomsListEntry
     */
    'tipicalCostToOperate': number;
    /**
     * 
     * @type {Room}
     * @memberof RoomsListEntry
     */
    'Room'?: Room;
}
/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof Schedule
     */
    'id': string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof Schedule
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'roomId': string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'note': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof Schedule
     */
    'start': string;
    /**
     * Estimated time of entering ambulance. Ignored on post.
     * @type {string}
     * @memberof Schedule
     */
    'end': string;
}
/**
 * 
 * @export
 * @interface WaitingListEntry
 */
export interface WaitingListEntry {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'id': string;
    /**
     * Name of patient in waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'name'?: string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof WaitingListEntry
     */
    'patientId': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof WaitingListEntry
     */
    'waitingSince': string;
    /**
     * Estimated time of entering ambulance. Ignored on post.
     * @type {string}
     * @memberof WaitingListEntry
     */
    'estimatedStart'?: string;
    /**
     * Estimated duration of ambulance visit. If not provided then it will be computed based on condition and ambulance settings
     * @type {number}
     * @memberof WaitingListEntry
     */
    'estimatedDurationMinutes': number;
    /**
     * 
     * @type {Condition}
     * @memberof WaitingListEntry
     */
    'condition'?: Condition;
}

/**
 * AmbulanceConditionsApi - axios parameter creator
 * @export
 */
export const AmbulanceConditionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditions: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getConditions', 'ambulanceId', ambulanceId)
            const localVarPath = `/waiting-list/{ambulanceId}/condition`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceConditionsApi - functional programming interface
 * @export
 */
export const AmbulanceConditionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceConditionsApiAxiosParamCreator(configuration)
    return {
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditions(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Condition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditions(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceConditionsApi - factory interface
 * @export
 */
export const AmbulanceConditionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceConditionsApiFp(configuration)
    return {
        /**
         * By using ambulanceId you get list of predefined conditions
         * @summary Provides the list of conditions associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditions(ambulanceId: string, options?: any): AxiosPromise<Array<Condition>> {
            return localVarFp.getConditions(ambulanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceConditionsApi - interface
 * @export
 * @interface AmbulanceConditionsApi
 */
export interface AmbulanceConditionsApiInterface {
    /**
     * By using ambulanceId you get list of predefined conditions
     * @summary Provides the list of conditions associated with ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceConditionsApiInterface
     */
    getConditions(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Condition>>;

}

/**
 * AmbulanceConditionsApi - object-oriented interface
 * @export
 * @class AmbulanceConditionsApi
 * @extends {BaseAPI}
 */
export class AmbulanceConditionsApi extends BaseAPI implements AmbulanceConditionsApiInterface {
    /**
     * By using ambulanceId you get list of predefined conditions
     * @summary Provides the list of conditions associated with ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceConditionsApi
     */
    public getConditions(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceConditionsApiFp(this.configuration).getConditions(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmbulanceRoomsApi - axios parameter creator
 * @export
 */
export const AmbulanceRoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the rooms list.
         * @summary Saves new entry into rooms list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Room} room Rooms list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (ambulanceId: string, room: Room, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createRoom', 'ambulanceId', ambulanceId)
            // verify required parameter 'room' is not null or undefined
            assertParamExists('createRoom', 'room', room)
            const localVarPath = `/rooms/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(room, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific room from the rooms list.
         * @summary Deletes specific room
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the rooms list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteRoom', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteRoom', 'entryId', entryId)
            const localVarPath = `/rooms/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you get list of predefined rooms
         * @summary Provides the list of rooms associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getRooms', 'ambulanceId', ambulanceId)
            const localVarPath = `/rooms/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceRoomsApi - functional programming interface
 * @export
 */
export const AmbulanceRoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceRoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the rooms list.
         * @summary Saves new entry into rooms list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Room} room Rooms list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(ambulanceId: string, room: Room, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(ambulanceId, room, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific room from the rooms list.
         * @summary Deletes specific room
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the rooms list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you get list of predefined rooms
         * @summary Provides the list of rooms associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRooms(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRooms(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceRoomsApi - factory interface
 * @export
 */
export const AmbulanceRoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceRoomsApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the rooms list.
         * @summary Saves new entry into rooms list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Room} room Rooms list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(ambulanceId: string, room: Room, options?: any): AxiosPromise<Room> {
            return localVarFp.createRoom(ambulanceId, room, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific room from the rooms list.
         * @summary Deletes specific room
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the rooms list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(ambulanceId: string, entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoom(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you get list of predefined rooms
         * @summary Provides the list of rooms associated with ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms(ambulanceId: string, options?: any): AxiosPromise<Array<Room>> {
            return localVarFp.getRooms(ambulanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceRoomsApi - interface
 * @export
 * @interface AmbulanceRoomsApi
 */
export interface AmbulanceRoomsApiInterface {
    /**
     * Use this method to store new entry into the rooms list.
     * @summary Saves new entry into rooms list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {Room} room Rooms list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApiInterface
     */
    createRoom(ambulanceId: string, room: Room, options?: AxiosRequestConfig): AxiosPromise<Room>;

    /**
     * Use this method to delete the specific room from the rooms list.
     * @summary Deletes specific room
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the rooms list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApiInterface
     */
    deleteRoom(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId you get list of predefined rooms
     * @summary Provides the list of rooms associated with ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApiInterface
     */
    getRooms(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Room>>;

}

/**
 * AmbulanceRoomsApi - object-oriented interface
 * @export
 * @class AmbulanceRoomsApi
 * @extends {BaseAPI}
 */
export class AmbulanceRoomsApi extends BaseAPI implements AmbulanceRoomsApiInterface {
    /**
     * Use this method to store new entry into the rooms list.
     * @summary Saves new entry into rooms list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {Room} room Rooms list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApi
     */
    public createRoom(ambulanceId: string, room: Room, options?: AxiosRequestConfig) {
        return AmbulanceRoomsApiFp(this.configuration).createRoom(ambulanceId, room, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific room from the rooms list.
     * @summary Deletes specific room
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the rooms list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApi
     */
    public deleteRoom(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceRoomsApiFp(this.configuration).deleteRoom(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you get list of predefined rooms
     * @summary Provides the list of rooms associated with ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceRoomsApi
     */
    public getRooms(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceRoomsApiFp(this.configuration).getRooms(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmbulanceWaitingListApi - axios parameter creator
 * @export
 */
export const AmbulanceWaitingListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWaitingListEntry: async (ambulanceId: string, waitingListEntry: WaitingListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'waitingListEntry' is not null or undefined
            assertParamExists('createWaitingListEntry', 'waitingListEntry', waitingListEntry)
            const localVarPath = `/waiting-list/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waitingListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWaitingListEntry: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteWaitingListEntry', 'entryId', entryId)
            const localVarPath = `/waiting-list/{ambulanceId}/entries/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you get list of entries in ambulance waiting list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getWaitingListEntries', 'ambulanceId', ambulanceId)
            const localVarPath = `/waiting-list/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntry: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getWaitingListEntry', 'entryId', entryId)
            const localVarPath = `/waiting-list/{ambulanceId}/entries/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWaitingListEntry: async (ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'entryId', entryId)
            // verify required parameter 'waitingListEntry' is not null or undefined
            assertParamExists('updateWaitingListEntry', 'waitingListEntry', waitingListEntry)
            const localVarPath = `/waiting-list/{ambulanceId}/entries/{entryId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waitingListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceWaitingListApi - functional programming interface
 * @export
 */
export const AmbulanceWaitingListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceWaitingListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWaitingListEntry(ambulanceId, waitingListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWaitingListEntry(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you get list of entries in ambulance waiting list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaitingListEntries(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WaitingListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaitingListEntries(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaitingListEntry(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaitingListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceWaitingListApi - factory interface
 * @export
 */
export const AmbulanceWaitingListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceWaitingListApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the waiting list.
         * @summary Saves new entry into waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.createWaitingListEntry(ambulanceId, waitingListEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific entry from the waiting list.
         * @summary Deletes specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWaitingListEntry(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you get list of entries in ambulance waiting list
         * @summary Provides the ambulance waiting list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries(ambulanceId: string, options?: any): AxiosPromise<Array<WaitingListEntry>> {
            return localVarFp.getWaitingListEntries(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId and entryId you can details of particular entry item ambulance.
         * @summary Provides details about waiting list entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntry(ambulanceId: string, entryId: string, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.getWaitingListEntry(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the waiting list entry.
         * @summary Updates specific entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: any): AxiosPromise<WaitingListEntry> {
            return localVarFp.updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceWaitingListApi - interface
 * @export
 * @interface AmbulanceWaitingListApi
 */
export interface AmbulanceWaitingListApiInterface {
    /**
     * Use this method to store new entry into the waiting list.
     * @summary Saves new entry into waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApiInterface
     */
    createWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): AxiosPromise<WaitingListEntry>;

    /**
     * Use this method to delete the specific entry from the waiting list.
     * @summary Deletes specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApiInterface
     */
    deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId you get list of entries in ambulance waiting list
     * @summary Provides the ambulance waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApiInterface
     */
    getWaitingListEntries(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<WaitingListEntry>>;

    /**
     * By using ambulanceId and entryId you can details of particular entry item ambulance.
     * @summary Provides details about waiting list entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApiInterface
     */
    getWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<WaitingListEntry>;

    /**
     * Use this method to update content of the waiting list entry.
     * @summary Updates specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApiInterface
     */
    updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig): AxiosPromise<WaitingListEntry>;

}

/**
 * AmbulanceWaitingListApi - object-oriented interface
 * @export
 * @class AmbulanceWaitingListApi
 * @extends {BaseAPI}
 */
export class AmbulanceWaitingListApi extends BaseAPI implements AmbulanceWaitingListApiInterface {
    /**
     * Use this method to store new entry into the waiting list.
     * @summary Saves new entry into waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApi
     */
    public createWaitingListEntry(ambulanceId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig) {
        return AmbulanceWaitingListApiFp(this.configuration).createWaitingListEntry(ambulanceId, waitingListEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific entry from the waiting list.
     * @summary Deletes specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApi
     */
    public deleteWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceWaitingListApiFp(this.configuration).deleteWaitingListEntry(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you get list of entries in ambulance waiting list
     * @summary Provides the ambulance waiting list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApi
     */
    public getWaitingListEntries(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceWaitingListApiFp(this.configuration).getWaitingListEntries(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId and entryId you can details of particular entry item ambulance.
     * @summary Provides details about waiting list entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApi
     */
    public getWaitingListEntry(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceWaitingListApiFp(this.configuration).getWaitingListEntry(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the waiting list entry.
     * @summary Updates specific entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {WaitingListEntry} waitingListEntry Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceWaitingListApi
     */
    public updateWaitingListEntry(ambulanceId: string, entryId: string, waitingListEntry: WaitingListEntry, options?: AxiosRequestConfig) {
        return AmbulanceWaitingListApiFp(this.configuration).updateWaitingListEntry(ambulanceId, entryId, waitingListEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmbulancesApi - axios parameter creator
 * @export
 */
export const AmbulancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to initialize new ambulance in the system
         * @summary Saves new ambulance definition
         * @param {Ambulance} ambulance Ambulance details to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance: async (ambulance: Ambulance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulance' is not null or undefined
            assertParamExists('createAmbulance', 'ambulance', ambulance)
            const localVarPath = `/ambulance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific ambulance from the system.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulance/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulancesApi - functional programming interface
 * @export
 */
export const AmbulancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to initialize new ambulance in the system
         * @summary Saves new ambulance definition
         * @param {Ambulance} ambulance Ambulance details to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmbulance(ambulance: Ambulance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ambulance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulance(ambulance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific ambulance from the system.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulancesApi - factory interface
 * @export
 */
export const AmbulancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulancesApiFp(configuration)
    return {
        /**
         * Use this method to initialize new ambulance in the system
         * @summary Saves new ambulance definition
         * @param {Ambulance} ambulance Ambulance details to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance(ambulance: Ambulance, options?: any): AxiosPromise<Ambulance> {
            return localVarFp.createAmbulance(ambulance, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific ambulance from the system.
         * @summary Deletes specific ambulance
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance(ambulanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAmbulance(ambulanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulancesApi - interface
 * @export
 * @interface AmbulancesApi
 */
export interface AmbulancesApiInterface {
    /**
     * Use this method to initialize new ambulance in the system
     * @summary Saves new ambulance definition
     * @param {Ambulance} ambulance Ambulance details to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulancesApiInterface
     */
    createAmbulance(ambulance: Ambulance, options?: AxiosRequestConfig): AxiosPromise<Ambulance>;

    /**
     * Use this method to delete the specific ambulance from the system.
     * @summary Deletes specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulancesApiInterface
     */
    deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AmbulancesApi - object-oriented interface
 * @export
 * @class AmbulancesApi
 * @extends {BaseAPI}
 */
export class AmbulancesApi extends BaseAPI implements AmbulancesApiInterface {
    /**
     * Use this method to initialize new ambulance in the system
     * @summary Saves new ambulance definition
     * @param {Ambulance} ambulance Ambulance details to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulancesApi
     */
    public createAmbulance(ambulance: Ambulance, options?: AxiosRequestConfig) {
        return AmbulancesApiFp(this.configuration).createAmbulance(ambulance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific ambulance from the system.
     * @summary Deletes specific ambulance
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulancesApi
     */
    public deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulancesApiFp(this.configuration).deleteAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchedulesApi - axios parameter creator
 * @export
 */
export const SchedulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the schedule list.
         * @summary Saves new entry into schedule list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Schedule} schedule Schedule list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule: async (ambulanceId: string, schedule: Schedule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createSchedule', 'ambulanceId', ambulanceId)
            // verify required parameter 'schedule' is not null or undefined
            assertParamExists('createSchedule', 'schedule', schedule)
            const localVarPath = `/schedules/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific schedule entry from the schedule list.
         * @summary Deletes specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule: async (ambulanceId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteSchedule', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteSchedule', 'entryId', entryId)
            const localVarPath = `/schedules/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId you get list of predefined schedule
         * @summary Provides the ambulance schedule
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getSchedule', 'ambulanceId', ambulanceId)
            const localVarPath = `/schedules/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the schedule entry.
         * @summary Updates specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {Schedule} schedule Schedule list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (ambulanceId: string, entryId: string, schedule: Schedule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateSchedule', 'ambulanceId', ambulanceId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateSchedule', 'entryId', entryId)
            // verify required parameter 'schedule' is not null or undefined
            assertParamExists('updateSchedule', 'schedule', schedule)
            const localVarPath = `/schedules/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchedulesApi - functional programming interface
 * @export
 */
export const SchedulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchedulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the schedule list.
         * @summary Saves new entry into schedule list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Schedule} schedule Schedule list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchedule(ambulanceId: string, schedule: Schedule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchedule(ambulanceId, schedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific schedule entry from the schedule list.
         * @summary Deletes specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchedule(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchedule(ambulanceId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId you get list of predefined schedule
         * @summary Provides the ambulance schedule
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchedule(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WaitingListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchedule(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the schedule entry.
         * @summary Updates specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {Schedule} schedule Schedule list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(ambulanceId: string, entryId: string, schedule: Schedule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(ambulanceId, entryId, schedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchedulesApi - factory interface
 * @export
 */
export const SchedulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchedulesApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the schedule list.
         * @summary Saves new entry into schedule list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {Schedule} schedule Schedule list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(ambulanceId: string, schedule: Schedule, options?: any): AxiosPromise<Schedule> {
            return localVarFp.createSchedule(ambulanceId, schedule, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific schedule entry from the schedule list.
         * @summary Deletes specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(ambulanceId: string, entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSchedule(ambulanceId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId you get list of predefined schedule
         * @summary Provides the ambulance schedule
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(ambulanceId: string, options?: any): AxiosPromise<Array<WaitingListEntry>> {
            return localVarFp.getSchedule(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the schedule entry.
         * @summary Updates specific schedule entry
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the schedule list
         * @param {Schedule} schedule Schedule list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(ambulanceId: string, entryId: string, schedule: Schedule, options?: any): AxiosPromise<Schedule> {
            return localVarFp.updateSchedule(ambulanceId, entryId, schedule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchedulesApi - interface
 * @export
 * @interface SchedulesApi
 */
export interface SchedulesApiInterface {
    /**
     * Use this method to store new entry into the schedule list.
     * @summary Saves new entry into schedule list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {Schedule} schedule Schedule list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApiInterface
     */
    createSchedule(ambulanceId: string, schedule: Schedule, options?: AxiosRequestConfig): AxiosPromise<Schedule>;

    /**
     * Use this method to delete the specific schedule entry from the schedule list.
     * @summary Deletes specific schedule entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the schedule list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApiInterface
     */
    deleteSchedule(ambulanceId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId you get list of predefined schedule
     * @summary Provides the ambulance schedule
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApiInterface
     */
    getSchedule(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<WaitingListEntry>>;

    /**
     * Use this method to update content of the schedule entry.
     * @summary Updates specific schedule entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the schedule list
     * @param {Schedule} schedule Schedule list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApiInterface
     */
    updateSchedule(ambulanceId: string, entryId: string, schedule: Schedule, options?: AxiosRequestConfig): AxiosPromise<Schedule>;

}

/**
 * SchedulesApi - object-oriented interface
 * @export
 * @class SchedulesApi
 * @extends {BaseAPI}
 */
export class SchedulesApi extends BaseAPI implements SchedulesApiInterface {
    /**
     * Use this method to store new entry into the schedule list.
     * @summary Saves new entry into schedule list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {Schedule} schedule Schedule list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApi
     */
    public createSchedule(ambulanceId: string, schedule: Schedule, options?: AxiosRequestConfig) {
        return SchedulesApiFp(this.configuration).createSchedule(ambulanceId, schedule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific schedule entry from the schedule list.
     * @summary Deletes specific schedule entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the schedule list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApi
     */
    public deleteSchedule(ambulanceId: string, entryId: string, options?: AxiosRequestConfig) {
        return SchedulesApiFp(this.configuration).deleteSchedule(ambulanceId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId you get list of predefined schedule
     * @summary Provides the ambulance schedule
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApi
     */
    public getSchedule(ambulanceId: string, options?: AxiosRequestConfig) {
        return SchedulesApiFp(this.configuration).getSchedule(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the schedule entry.
     * @summary Updates specific schedule entry
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the schedule list
     * @param {Schedule} schedule Schedule list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulesApi
     */
    public updateSchedule(ambulanceId: string, entryId: string, schedule: Schedule, options?: AxiosRequestConfig) {
        return SchedulesApiFp(this.configuration).updateSchedule(ambulanceId, entryId, schedule, options).then((request) => request(this.axios, this.basePath));
    }
}


